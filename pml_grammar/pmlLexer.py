# Generated from pml.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u0177\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\32\3\32\7\32\u010c\n\32\f\32\16")
        buf.write("\32\u010f\13\32\3\33\3\33\3\33\3\33\7\33\u0115\n\33\f")
        buf.write("\33\16\33\u0118\13\33\3\33\3\33\3\34\3\34\6\34\u011e\n")
        buf.write("\34\r\34\16\34\u011f\3\35\5\35\u0123\n\35\3\35\3\35\5")
        buf.write("\35\u0127\n\35\3\35\5\35\u012a\n\35\3\36\3\36\3\36\7\36")
        buf.write("\u012f\n\36\f\36\16\36\u0132\13\36\3\37\6\37\u0135\n\37")
        buf.write("\r\37\16\37\u0136\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3")
        buf.write("%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3")
        buf.write(".\3.\3/\3/\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\63")
        buf.write("\3\63\3\63\3\64\3\64\3\64\3\64\7\64\u0168\n\64\f\64\16")
        buf.write("\64\u016b\13\64\3\64\3\64\3\64\3\64\3\65\6\65\u0172\n")
        buf.write("\65\r\65\16\65\u0173\3\65\3\65\3\u0169\2\66\3\3\5\4\7")
        buf.write("\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-")
        buf.write("Y.[/]\60_\61a\62c\63e\64g\65i\66\3\2\b\4\2C\\c|\7\2//")
        buf.write("\62;C\\aac|\3\2$$\5\2\62;CHch\4\2\f\f\17\17\5\2\13\f\17")
        buf.write("\17\"\"\2\u0181\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2")
        buf.write("\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5q\3\2\2")
        buf.write("\2\7w\3\2\2\2\t\u0080\3\2\2\2\13\u0084\3\2\2\2\r\u008a")
        buf.write("\3\2\2\2\17\u0095\3\2\2\2\21\u009a\3\2\2\2\23\u00a3\3")
        buf.write("\2\2\2\25\u00b1\3\2\2\2\27\u00c1\3\2\2\2\31\u00c4\3\2")
        buf.write("\2\2\33\u00cd\3\2\2\2\35\u00da\3\2\2\2\37\u00de\3\2\2")
        buf.write("\2!\u00e3\3\2\2\2#\u00e9\3\2\2\2%\u00ee\3\2\2\2\'\u00f3")
        buf.write("\3\2\2\2)\u00f5\3\2\2\2+\u00fb\3\2\2\2-\u00fe\3\2\2\2")
        buf.write("/\u0102\3\2\2\2\61\u0106\3\2\2\2\63\u0109\3\2\2\2\65\u0110")
        buf.write("\3\2\2\2\67\u011b\3\2\2\29\u0129\3\2\2\2;\u012b\3\2\2")
        buf.write("\2=\u0134\3\2\2\2?\u0138\3\2\2\2A\u013a\3\2\2\2C\u013c")
        buf.write("\3\2\2\2E\u013e\3\2\2\2G\u0140\3\2\2\2I\u0142\3\2\2\2")
        buf.write("K\u0144\3\2\2\2M\u0146\3\2\2\2O\u0148\3\2\2\2Q\u014a\3")
        buf.write("\2\2\2S\u014c\3\2\2\2U\u014e\3\2\2\2W\u0150\3\2\2\2Y\u0152")
        buf.write("\3\2\2\2[\u0154\3\2\2\2]\u0156\3\2\2\2_\u0158\3\2\2\2")
        buf.write("a\u015b\3\2\2\2c\u015d\3\2\2\2e\u0160\3\2\2\2g\u0163\3")
        buf.write("\2\2\2i\u0171\3\2\2\2kl\7B\2\2lm\7p\2\2mn\7c\2\2no\7o")
        buf.write("\2\2op\7g\2\2p\4\3\2\2\2qr\7n\2\2rs\7g\2\2st\7x\2\2tu")
        buf.write("\7g\2\2uv\7n\2\2v\6\3\2\2\2wx\7u\2\2xy\7{\2\2yz\7o\2\2")
        buf.write("z{\7o\2\2{|\7g\2\2|}\7v\2\2}~\7t\2\2~\177\7{\2\2\177\b")
        buf.write("\3\2\2\2\u0080\u0081\7w\2\2\u0081\u0082\7u\2\2\u0082\u0083")
        buf.write("\7g\2\2\u0083\n\3\2\2\2\u0084\u0085\7h\2\2\u0085\u0086")
        buf.write("\7c\2\2\u0086\u0087\7e\2\2\u0087\u0088\7g\2\2\u0088\u0089")
        buf.write("\7u\2\2\u0089\f\3\2\2\2\u008a\u008b\7u\2\2\u008b\u008c")
        buf.write("\7j\2\2\u008c\u008d\7c\2\2\u008d\u008e\7t\2\2\u008e\u008f")
        buf.write("\7r\2\2\u008f\u0090\7G\2\2\u0090\u0091\7f\2\2\u0091\u0092")
        buf.write("\7i\2\2\u0092\u0093\7g\2\2\u0093\u0094\7u\2\2\u0094\16")
        buf.write("\3\2\2\2\u0095\u0096\7c\2\2\u0096\u0097\7v\2\2\u0097\u0098")
        buf.write("\7v\2\2\u0098\u0099\7t\2\2\u0099\20\3\2\2\2\u009a\u009b")
        buf.write("\7d\2\2\u009b\u009c\7n\2\2\u009c\u009d\7f\2\2\u009d\u009e")
        buf.write("\7i\2\2\u009e\u009f\7C\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1")
        buf.write("\7v\2\2\u00a1\u00a2\7t\2\2\u00a2\22\3\2\2\2\u00a3\u00a4")
        buf.write("\7t\2\2\u00a4\u00a5\7c\2\2\u00a5\u00a6\7p\2\2\u00a6\u00a7")
        buf.write("\7f\2\2\u00a7\u00a8\7q\2\2\u00a8\u00a9\7o\2\2\u00a9\u00aa")
        buf.write("\7a\2\2\u00aa\u00ab\7p\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad")
        buf.write("\7t\2\2\u00ad\u00ae\7o\2\2\u00ae\u00af\7c\2\2\u00af\u00b0")
        buf.write("\7n\2\2\u00b0\24\3\2\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3")
        buf.write("\7c\2\2\u00b3\u00b4\7p\2\2\u00b4\u00b5\7f\2\2\u00b5\u00b6")
        buf.write("\7q\2\2\u00b6\u00b7\7o\2\2\u00b7\u00b8\7a\2\2\u00b8\u00b9")
        buf.write("\7y\2\2\u00b9\u00ba\7g\2\2\u00ba\u00bb\7k\2\2\u00bb\u00bc")
        buf.write("\7i\2\2\u00bc\u00bd\7j\2\2\u00bd\u00be\7v\2\2\u00be\u00bf")
        buf.write("\7g\2\2\u00bf\u00c0\7f\2\2\u00c0\26\3\2\2\2\u00c1\u00c2")
        buf.write("\7k\2\2\u00c2\u00c3\7h\2\2\u00c3\30\3\2\2\2\u00c4\u00c5")
        buf.write("\7w\2\2\u00c5\u00c6\7u\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8")
        buf.write("\7a\2\2\u00c8\u00c9\7h\2\2\u00c9\u00ca\7t\2\2\u00ca\u00cb")
        buf.write("\7q\2\2\u00cb\u00cc\7o\2\2\u00cc\32\3\2\2\2\u00cd\u00ce")
        buf.write("\7r\2\2\u00ce\u00cf\7g\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1")
        buf.write("\7a\2\2\u00d1\u00d2\7d\2\2\u00d2\u00d3\7w\2\2\u00d3\u00d4")
        buf.write("\7k\2\2\u00d4\u00d5\7n\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7")
        buf.write("\7k\2\2\u00d7\u00d8\7p\2\2\u00d8\u00d9\7i\2\2\u00d9\34")
        buf.write("\3\2\2\2\u00da\u00db\7t\2\2\u00db\u00dc\7i\2\2\u00dc\u00dd")
        buf.write("\7d\2\2\u00dd\36\3\2\2\2\u00de\u00df\7t\2\2\u00df\u00e0")
        buf.write("\7i\2\2\u00e0\u00e1\7d\2\2\u00e1\u00e2\7c\2\2\u00e2 \3")
        buf.write("\2\2\2\u00e3\u00e4\7B\2\2\u00e4\u00e5\7t\2\2\u00e5\u00e6")
        buf.write("\7q\2\2\u00e6\u00e7\7q\2\2\u00e7\u00e8\7h\2\2\u00e8\"")
        buf.write("\3\2\2\2\u00e9\u00ea\7B\2\2\u00ea\u00eb\7c\2\2\u00eb\u00ec")
        buf.write("\7n\2\2\u00ec\u00ed\7n\2\2\u00ed$\3\2\2\2\u00ee\u00ef")
        buf.write("\7k\2\2\u00ef\u00f0\7v\2\2\u00f0\u00f1\7g\2\2\u00f1\u00f2")
        buf.write("\7o\2\2\u00f2&\3\2\2\2\u00f3\u00f4\7\60\2\2\u00f4(\3\2")
        buf.write("\2\2\u00f5\u00f6\7u\2\2\u00f6\u00f7\7v\2\2\u00f7\u00f8")
        buf.write("\7{\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa\7g\2\2\u00fa*\3")
        buf.write("\2\2\2\u00fb\u00fc\7q\2\2\u00fc\u00fd\7t\2\2\u00fd,\3")
        buf.write("\2\2\2\u00fe\u00ff\7c\2\2\u00ff\u0100\7p\2\2\u0100\u0101")
        buf.write("\7f\2\2\u0101.\3\2\2\2\u0102\u0103\7p\2\2\u0103\u0104")
        buf.write("\7q\2\2\u0104\u0105\7v\2\2\u0105\60\3\2\2\2\u0106\u0107")
        buf.write("\7k\2\2\u0107\u0108\7p\2\2\u0108\62\3\2\2\2\u0109\u010d")
        buf.write("\t\2\2\2\u010a\u010c\t\3\2\2\u010b\u010a\3\2\2\2\u010c")
        buf.write("\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2")
        buf.write("\u010e\64\3\2\2\2\u010f\u010d\3\2\2\2\u0110\u0116\7$\2")
        buf.write("\2\u0111\u0112\7$\2\2\u0112\u0115\7$\2\2\u0113\u0115\n")
        buf.write("\4\2\2\u0114\u0111\3\2\2\2\u0114\u0113\3\2\2\2\u0115\u0118")
        buf.write("\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117")
        buf.write("\u0119\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011a\7$\2\2")
        buf.write("\u011a\66\3\2\2\2\u011b\u011d\7%\2\2\u011c\u011e\t\5\2")
        buf.write("\2\u011d\u011c\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u011d")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u01208\3\2\2\2\u0121\u0123")
        buf.write("\7/\2\2\u0122\u0121\3\2\2\2\u0122\u0123\3\2\2\2\u0123")
        buf.write("\u0124\3\2\2\2\u0124\u012a\5=\37\2\u0125\u0127\7/\2\2")
        buf.write("\u0126\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3")
        buf.write("\2\2\2\u0128\u012a\5;\36\2\u0129\u0122\3\2\2\2\u0129\u0126")
        buf.write("\3\2\2\2\u012a:\3\2\2\2\u012b\u012c\5=\37\2\u012c\u0130")
        buf.write("\7\60\2\2\u012d\u012f\5=\37\2\u012e\u012d\3\2\2\2\u012f")
        buf.write("\u0132\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2")
        buf.write("\u0131<\3\2\2\2\u0132\u0130\3\2\2\2\u0133\u0135\4\62;")
        buf.write("\2\u0134\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0134")
        buf.write("\3\2\2\2\u0136\u0137\3\2\2\2\u0137>\3\2\2\2\u0138\u0139")
        buf.write("\7B\2\2\u0139@\3\2\2\2\u013a\u013b\7}\2\2\u013bB\3\2\2")
        buf.write("\2\u013c\u013d\7\177\2\2\u013dD\3\2\2\2\u013e\u013f\7")
        buf.write("*\2\2\u013fF\3\2\2\2\u0140\u0141\7+\2\2\u0141H\3\2\2\2")
        buf.write("\u0142\u0143\7]\2\2\u0143J\3\2\2\2\u0144\u0145\7_\2\2")
        buf.write("\u0145L\3\2\2\2\u0146\u0147\7~\2\2\u0147N\3\2\2\2\u0148")
        buf.write("\u0149\7.\2\2\u0149P\3\2\2\2\u014a\u014b\7<\2\2\u014b")
        buf.write("R\3\2\2\2\u014c\u014d\7=\2\2\u014dT\3\2\2\2\u014e\u014f")
        buf.write("\7-\2\2\u014fV\3\2\2\2\u0150\u0151\7/\2\2\u0151X\3\2\2")
        buf.write("\2\u0152\u0153\7,\2\2\u0153Z\3\2\2\2\u0154\u0155\7\61")
        buf.write("\2\2\u0155\\\3\2\2\2\u0156\u0157\7@\2\2\u0157^\3\2\2\2")
        buf.write("\u0158\u0159\7@\2\2\u0159\u015a\7?\2\2\u015a`\3\2\2\2")
        buf.write("\u015b\u015c\7>\2\2\u015cb\3\2\2\2\u015d\u015e\7>\2\2")
        buf.write("\u015e\u015f\7?\2\2\u015fd\3\2\2\2\u0160\u0161\7?\2\2")
        buf.write("\u0161\u0162\7?\2\2\u0162f\3\2\2\2\u0163\u0164\7\61\2")
        buf.write("\2\u0164\u0165\7\61\2\2\u0165\u0169\3\2\2\2\u0166\u0168")
        buf.write("\13\2\2\2\u0167\u0166\3\2\2\2\u0168\u016b\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016c\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016c\u016d\t\6\2\2\u016d\u016e\3")
        buf.write("\2\2\2\u016e\u016f\b\64\2\2\u016fh\3\2\2\2\u0170\u0172")
        buf.write("\t\7\2\2\u0171\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173")
        buf.write("\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2")
        buf.write("\u0175\u0176\b\65\2\2\u0176j\3\2\2\2\17\2\u010b\u010d")
        buf.write("\u0114\u0116\u011f\u0122\u0126\u0129\u0130\u0136\u0169")
        buf.write("\u0173\3\b\2\2")
        return buf.getvalue()


class pmlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    OR = 21
    AND = 22
    NOT = 23
    IN = 24
    IDENTIFIER = 25
    STRING_LITERAL = 26
    HEX_NUMBER = 27
    NUMBER = 28
    FLOAT = 29
    INT = 30
    STRUDEL = 31
    LCURLY = 32
    RCURLY = 33
    LPAREN = 34
    RPAREN = 35
    LBRACK = 36
    RBRACK = 37
    PIPE = 38
    COMMA = 39
    COLON = 40
    SEMI = 41
    PLUS = 42
    MINUS = 43
    TIMES = 44
    DIV = 45
    GT = 46
    GE = 47
    LT = 48
    LE = 49
    EQ = 50
    COMMENT = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@name'", "'level'", "'symmetry'", "'use'", "'faces'", "'sharpEdges'", 
            "'attr'", "'bldgAttr'", "'random_normal'", "'random_weighted'", 
            "'if'", "'use_from'", "'per_building'", "'rgb'", "'rgba'", "'@roof'", 
            "'@all'", "'item'", "'.'", "'style'", "'or'", "'and'", "'not'", 
            "'in'", "'@'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'|'", 
            "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", 
            "'<'", "'<='", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "OR", "AND", "NOT", "IN", "IDENTIFIER", "STRING_LITERAL", "HEX_NUMBER", 
            "NUMBER", "FLOAT", "INT", "STRUDEL", "LCURLY", "RCURLY", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "PIPE", "COMMA", "COLON", "SEMI", 
            "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "OR", "AND", "NOT", "IN", "IDENTIFIER", "STRING_LITERAL", 
                  "HEX_NUMBER", "NUMBER", "FLOAT", "INT", "STRUDEL", "LCURLY", 
                  "RCURLY", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "PIPE", 
                  "COMMA", "COLON", "SEMI", "PLUS", "MINUS", "TIMES", "DIV", 
                  "GT", "GE", "LT", "LE", "EQ", "COMMENT", "WS" ]

    grammarFileName = "pml.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


