# Generated from pml.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u0175\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26")
        buf.write("\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\7\32\u010a\n\32\f\32\16\32\u010d")
        buf.write("\13\32\3\33\3\33\3\33\3\33\7\33\u0113\n\33\f\33\16\33")
        buf.write("\u0116\13\33\3\33\3\33\3\34\3\34\6\34\u011c\n\34\r\34")
        buf.write("\16\34\u011d\3\35\5\35\u0121\n\35\3\35\3\35\5\35\u0125")
        buf.write("\n\35\3\35\5\35\u0128\n\35\3\36\3\36\3\36\7\36\u012d\n")
        buf.write("\36\f\36\16\36\u0130\13\36\3\37\6\37\u0133\n\37\r\37\16")
        buf.write("\37\u0134\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&")
        buf.write("\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/")
        buf.write("\3/\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\3\64\7\64\u0166\n\64\f\64\16\64\u0169")
        buf.write("\13\64\3\64\3\64\3\64\3\64\3\65\6\65\u0170\n\65\r\65\16")
        buf.write("\65\u0171\3\65\3\65\3\u0167\2\66\3\3\5\4\7\5\t\6\13\7")
        buf.write("\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21")
        buf.write("!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67")
        buf.write("\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61")
        buf.write("a\62c\63e\64g\65i\66\3\2\b\4\2C\\c|\7\2//\62;C\\aac|\3")
        buf.write("\2$$\5\2\62;CHch\4\2\f\f\17\17\5\2\13\f\17\17\"\"\2\u017f")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2")
        buf.write("A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2")
        buf.write("\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2")
        buf.write("\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2")
        buf.write("\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3")
        buf.write("\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5q\3\2\2\2\7w\3\2\2\2\t\u0080")
        buf.write("\3\2\2\2\13\u0084\3\2\2\2\r\u008a\3\2\2\2\17\u0095\3\2")
        buf.write("\2\2\21\u009a\3\2\2\2\23\u00a3\3\2\2\2\25\u00b1\3\2\2")
        buf.write("\2\27\u00c1\3\2\2\2\31\u00c4\3\2\2\2\33\u00cd\3\2\2\2")
        buf.write("\35\u00da\3\2\2\2\37\u00de\3\2\2\2!\u00e3\3\2\2\2#\u00e8")
        buf.write("\3\2\2\2%\u00ec\3\2\2\2\'\u00f1\3\2\2\2)\u00f3\3\2\2\2")
        buf.write("+\u00f9\3\2\2\2-\u00fc\3\2\2\2/\u0100\3\2\2\2\61\u0104")
        buf.write("\3\2\2\2\63\u0107\3\2\2\2\65\u010e\3\2\2\2\67\u0119\3")
        buf.write("\2\2\29\u0127\3\2\2\2;\u0129\3\2\2\2=\u0132\3\2\2\2?\u0136")
        buf.write("\3\2\2\2A\u0138\3\2\2\2C\u013a\3\2\2\2E\u013c\3\2\2\2")
        buf.write("G\u013e\3\2\2\2I\u0140\3\2\2\2K\u0142\3\2\2\2M\u0144\3")
        buf.write("\2\2\2O\u0146\3\2\2\2Q\u0148\3\2\2\2S\u014a\3\2\2\2U\u014c")
        buf.write("\3\2\2\2W\u014e\3\2\2\2Y\u0150\3\2\2\2[\u0152\3\2\2\2")
        buf.write("]\u0154\3\2\2\2_\u0156\3\2\2\2a\u0159\3\2\2\2c\u015b\3")
        buf.write("\2\2\2e\u015e\3\2\2\2g\u0161\3\2\2\2i\u016f\3\2\2\2kl")
        buf.write("\7B\2\2lm\7p\2\2mn\7c\2\2no\7o\2\2op\7g\2\2p\4\3\2\2\2")
        buf.write("qr\7n\2\2rs\7g\2\2st\7x\2\2tu\7g\2\2uv\7n\2\2v\6\3\2\2")
        buf.write("\2wx\7u\2\2xy\7{\2\2yz\7o\2\2z{\7o\2\2{|\7g\2\2|}\7v\2")
        buf.write("\2}~\7t\2\2~\177\7{\2\2\177\b\3\2\2\2\u0080\u0081\7w\2")
        buf.write("\2\u0081\u0082\7u\2\2\u0082\u0083\7g\2\2\u0083\n\3\2\2")
        buf.write("\2\u0084\u0085\7h\2\2\u0085\u0086\7c\2\2\u0086\u0087\7")
        buf.write("e\2\2\u0087\u0088\7g\2\2\u0088\u0089\7u\2\2\u0089\f\3")
        buf.write("\2\2\2\u008a\u008b\7u\2\2\u008b\u008c\7j\2\2\u008c\u008d")
        buf.write("\7c\2\2\u008d\u008e\7t\2\2\u008e\u008f\7r\2\2\u008f\u0090")
        buf.write("\7G\2\2\u0090\u0091\7f\2\2\u0091\u0092\7i\2\2\u0092\u0093")
        buf.write("\7g\2\2\u0093\u0094\7u\2\2\u0094\16\3\2\2\2\u0095\u0096")
        buf.write("\7c\2\2\u0096\u0097\7v\2\2\u0097\u0098\7v\2\2\u0098\u0099")
        buf.write("\7t\2\2\u0099\20\3\2\2\2\u009a\u009b\7d\2\2\u009b\u009c")
        buf.write("\7n\2\2\u009c\u009d\7f\2\2\u009d\u009e\7i\2\2\u009e\u009f")
        buf.write("\7C\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1\7v\2\2\u00a1\u00a2")
        buf.write("\7t\2\2\u00a2\22\3\2\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5")
        buf.write("\7c\2\2\u00a5\u00a6\7p\2\2\u00a6\u00a7\7f\2\2\u00a7\u00a8")
        buf.write("\7q\2\2\u00a8\u00a9\7o\2\2\u00a9\u00aa\7a\2\2\u00aa\u00ab")
        buf.write("\7p\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad\7t\2\2\u00ad\u00ae")
        buf.write("\7o\2\2\u00ae\u00af\7c\2\2\u00af\u00b0\7n\2\2\u00b0\24")
        buf.write("\3\2\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3\7c\2\2\u00b3\u00b4")
        buf.write("\7p\2\2\u00b4\u00b5\7f\2\2\u00b5\u00b6\7q\2\2\u00b6\u00b7")
        buf.write("\7o\2\2\u00b7\u00b8\7a\2\2\u00b8\u00b9\7y\2\2\u00b9\u00ba")
        buf.write("\7g\2\2\u00ba\u00bb\7k\2\2\u00bb\u00bc\7i\2\2\u00bc\u00bd")
        buf.write("\7j\2\2\u00bd\u00be\7v\2\2\u00be\u00bf\7g\2\2\u00bf\u00c0")
        buf.write("\7f\2\2\u00c0\26\3\2\2\2\u00c1\u00c2\7k\2\2\u00c2\u00c3")
        buf.write("\7h\2\2\u00c3\30\3\2\2\2\u00c4\u00c5\7w\2\2\u00c5\u00c6")
        buf.write("\7u\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7a\2\2\u00c8\u00c9")
        buf.write("\7h\2\2\u00c9\u00ca\7t\2\2\u00ca\u00cb\7q\2\2\u00cb\u00cc")
        buf.write("\7o\2\2\u00cc\32\3\2\2\2\u00cd\u00ce\7r\2\2\u00ce\u00cf")
        buf.write("\7g\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1\7a\2\2\u00d1\u00d2")
        buf.write("\7d\2\2\u00d2\u00d3\7w\2\2\u00d3\u00d4\7k\2\2\u00d4\u00d5")
        buf.write("\7n\2\2\u00d5\u00d6\7f\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d8")
        buf.write("\7p\2\2\u00d8\u00d9\7i\2\2\u00d9\34\3\2\2\2\u00da\u00db")
        buf.write("\7t\2\2\u00db\u00dc\7i\2\2\u00dc\u00dd\7d\2\2\u00dd\36")
        buf.write("\3\2\2\2\u00de\u00df\7t\2\2\u00df\u00e0\7i\2\2\u00e0\u00e1")
        buf.write("\7d\2\2\u00e1\u00e2\7c\2\2\u00e2 \3\2\2\2\u00e3\u00e4")
        buf.write("\7t\2\2\u00e4\u00e5\7q\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7")
        buf.write("\7h\2\2\u00e7\"\3\2\2\2\u00e8\u00e9\7c\2\2\u00e9\u00ea")
        buf.write("\7n\2\2\u00ea\u00eb\7n\2\2\u00eb$\3\2\2\2\u00ec\u00ed")
        buf.write("\7k\2\2\u00ed\u00ee\7v\2\2\u00ee\u00ef\7g\2\2\u00ef\u00f0")
        buf.write("\7o\2\2\u00f0&\3\2\2\2\u00f1\u00f2\7\60\2\2\u00f2(\3\2")
        buf.write("\2\2\u00f3\u00f4\7u\2\2\u00f4\u00f5\7v\2\2\u00f5\u00f6")
        buf.write("\7{\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8\7g\2\2\u00f8*\3")
        buf.write("\2\2\2\u00f9\u00fa\7q\2\2\u00fa\u00fb\7t\2\2\u00fb,\3")
        buf.write("\2\2\2\u00fc\u00fd\7c\2\2\u00fd\u00fe\7p\2\2\u00fe\u00ff")
        buf.write("\7f\2\2\u00ff.\3\2\2\2\u0100\u0101\7p\2\2\u0101\u0102")
        buf.write("\7q\2\2\u0102\u0103\7v\2\2\u0103\60\3\2\2\2\u0104\u0105")
        buf.write("\7k\2\2\u0105\u0106\7p\2\2\u0106\62\3\2\2\2\u0107\u010b")
        buf.write("\t\2\2\2\u0108\u010a\t\3\2\2\u0109\u0108\3\2\2\2\u010a")
        buf.write("\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\64\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u0114\7$\2")
        buf.write("\2\u010f\u0110\7$\2\2\u0110\u0113\7$\2\2\u0111\u0113\n")
        buf.write("\4\2\2\u0112\u010f\3\2\2\2\u0112\u0111\3\2\2\2\u0113\u0116")
        buf.write("\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115")
        buf.write("\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0118\7$\2\2")
        buf.write("\u0118\66\3\2\2\2\u0119\u011b\7%\2\2\u011a\u011c\t\5\2")
        buf.write("\2\u011b\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011b")
        buf.write("\3\2\2\2\u011d\u011e\3\2\2\2\u011e8\3\2\2\2\u011f\u0121")
        buf.write("\7/\2\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121")
        buf.write("\u0122\3\2\2\2\u0122\u0128\5=\37\2\u0123\u0125\7/\2\2")
        buf.write("\u0124\u0123\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\3")
        buf.write("\2\2\2\u0126\u0128\5;\36\2\u0127\u0120\3\2\2\2\u0127\u0124")
        buf.write("\3\2\2\2\u0128:\3\2\2\2\u0129\u012a\5=\37\2\u012a\u012e")
        buf.write("\7\60\2\2\u012b\u012d\5=\37\2\u012c\u012b\3\2\2\2\u012d")
        buf.write("\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2")
        buf.write("\u012f<\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0133\4\62;")
        buf.write("\2\u0132\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0132")
        buf.write("\3\2\2\2\u0134\u0135\3\2\2\2\u0135>\3\2\2\2\u0136\u0137")
        buf.write("\7B\2\2\u0137@\3\2\2\2\u0138\u0139\7}\2\2\u0139B\3\2\2")
        buf.write("\2\u013a\u013b\7\177\2\2\u013bD\3\2\2\2\u013c\u013d\7")
        buf.write("*\2\2\u013dF\3\2\2\2\u013e\u013f\7+\2\2\u013fH\3\2\2\2")
        buf.write("\u0140\u0141\7]\2\2\u0141J\3\2\2\2\u0142\u0143\7_\2\2")
        buf.write("\u0143L\3\2\2\2\u0144\u0145\7~\2\2\u0145N\3\2\2\2\u0146")
        buf.write("\u0147\7.\2\2\u0147P\3\2\2\2\u0148\u0149\7<\2\2\u0149")
        buf.write("R\3\2\2\2\u014a\u014b\7=\2\2\u014bT\3\2\2\2\u014c\u014d")
        buf.write("\7-\2\2\u014dV\3\2\2\2\u014e\u014f\7/\2\2\u014fX\3\2\2")
        buf.write("\2\u0150\u0151\7,\2\2\u0151Z\3\2\2\2\u0152\u0153\7\61")
        buf.write("\2\2\u0153\\\3\2\2\2\u0154\u0155\7@\2\2\u0155^\3\2\2\2")
        buf.write("\u0156\u0157\7@\2\2\u0157\u0158\7?\2\2\u0158`\3\2\2\2")
        buf.write("\u0159\u015a\7>\2\2\u015ab\3\2\2\2\u015b\u015c\7>\2\2")
        buf.write("\u015c\u015d\7?\2\2\u015dd\3\2\2\2\u015e\u015f\7?\2\2")
        buf.write("\u015f\u0160\7?\2\2\u0160f\3\2\2\2\u0161\u0162\7\61\2")
        buf.write("\2\u0162\u0163\7\61\2\2\u0163\u0167\3\2\2\2\u0164\u0166")
        buf.write("\13\2\2\2\u0165\u0164\3\2\2\2\u0166\u0169\3\2\2\2\u0167")
        buf.write("\u0168\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u016a\3\2\2\2")
        buf.write("\u0169\u0167\3\2\2\2\u016a\u016b\t\6\2\2\u016b\u016c\3")
        buf.write("\2\2\2\u016c\u016d\b\64\2\2\u016dh\3\2\2\2\u016e\u0170")
        buf.write("\t\7\2\2\u016f\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0173\3\2\2\2")
        buf.write("\u0173\u0174\b\65\2\2\u0174j\3\2\2\2\17\2\u0109\u010b")
        buf.write("\u0112\u0114\u011d\u0120\u0124\u0127\u012e\u0134\u0167")
        buf.write("\u0171\3\b\2\2")
        return buf.getvalue()


class pmlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    OR = 21
    AND = 22
    NOT = 23
    IN = 24
    IDENTIFIER = 25
    STRING_LITERAL = 26
    HEX_NUMBER = 27
    NUMBER = 28
    FLOAT = 29
    INT = 30
    STRUDEL = 31
    LCURLY = 32
    RCURLY = 33
    LPAREN = 34
    RPAREN = 35
    LBRACK = 36
    RBRACK = 37
    PIPE = 38
    COMMA = 39
    COLON = 40
    SEMI = 41
    PLUS = 42
    MINUS = 43
    TIMES = 44
    DIV = 45
    GT = 46
    GE = 47
    LT = 48
    LE = 49
    EQ = 50
    COMMENT = 51
    WS = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@name'", "'level'", "'symmetry'", "'use'", "'faces'", "'sharpEdges'", 
            "'attr'", "'bldgAttr'", "'random_normal'", "'random_weighted'", 
            "'if'", "'use_from'", "'per_building'", "'rgb'", "'rgba'", "'roof'", 
            "'all'", "'item'", "'.'", "'style'", "'or'", "'and'", "'not'", 
            "'in'", "'@'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'|'", 
            "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'>'", "'>='", 
            "'<'", "'<='", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "OR", "AND", "NOT", "IN", "IDENTIFIER", "STRING_LITERAL", "HEX_NUMBER", 
            "NUMBER", "FLOAT", "INT", "STRUDEL", "LCURLY", "RCURLY", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "PIPE", "COMMA", "COLON", "SEMI", 
            "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", "EQ", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "OR", "AND", "NOT", "IN", "IDENTIFIER", "STRING_LITERAL", 
                  "HEX_NUMBER", "NUMBER", "FLOAT", "INT", "STRUDEL", "LCURLY", 
                  "RCURLY", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "PIPE", 
                  "COMMA", "COLON", "SEMI", "PLUS", "MINUS", "TIMES", "DIV", 
                  "GT", "GE", "LT", "LE", "EQ", "COMMENT", "WS" ]

    grammarFileName = "pml.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


